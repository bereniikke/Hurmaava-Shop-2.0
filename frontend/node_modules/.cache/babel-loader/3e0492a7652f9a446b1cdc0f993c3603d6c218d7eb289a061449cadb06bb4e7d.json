{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getOrders } from './api';\nfunction ThankYou() {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchOrders = async () => {\n      try {\n        const urlSearchParams = new URLSearchParams(window.location.search);\n        const sessionId = urlSearchParams.get('sessionId');\n        if (!sessionId) {\n          // Handle the case where sessionId is missing\n          console.error('Session ID is missing');\n          return;\n        }\n        const fetchedOrders = await getOrders(sessionId);\n        setOrders(fetchedOrders);\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchOrders();\n  }, []); // Empty dependency array to run the effect only once\n}\n_s(ThankYou, \"ug8UXigqZ8+/aovEHLbbhGhrhf4=\");\n_c = ThankYou;\nexport default ThankYou;\nvar _c;\n$RefreshReg$(_c, \"ThankYou\");","map":{"version":3,"names":["React","useEffect","useState","getOrders","ThankYou","_s","orders","setOrders","loading","setLoading","fetchOrders","urlSearchParams","URLSearchParams","window","location","search","sessionId","get","console","error","fetchedOrders","_c","$RefreshReg$"],"sources":["/Users/lauraelfving/Desktop/react-shop/my-web-shop-react/frontend/src/ThankYou.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getOrders } from './api';\n\nfunction ThankYou() {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      try {\n        const urlSearchParams = new URLSearchParams(window.location.search);\n        const sessionId = urlSearchParams.get('sessionId');\n\n        if (!sessionId) {\n          // Handle the case where sessionId is missing\n          console.error('Session ID is missing');\n          return;\n        }\n\n        const fetchedOrders = await getOrders(sessionId);\n        setOrders(fetchedOrders);\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchOrders();\n  }, []); // Empty dependency array to run the effect only once\n\n  \n       \n}\n\nexport default ThankYou;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,OAAO;AAEjC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,eAAe,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;QACnE,MAAMC,SAAS,GAAGL,eAAe,CAACM,GAAG,CAAC,WAAW,CAAC;QAElD,IAAI,CAACD,SAAS,EAAE;UACd;UACAE,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;UACtC;QACF;QAEA,MAAMC,aAAa,GAAG,MAAMjB,SAAS,CAACa,SAAS,CAAC;QAChDT,SAAS,CAACa,aAAa,CAAC;MAC1B,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,SAAS;QACRV,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAIV;AAACL,EAAA,CA9BQD,QAAQ;AAAAiB,EAAA,GAARjB,QAAQ;AAgCjB,eAAeA,QAAQ;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}